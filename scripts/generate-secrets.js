#!/usr/bin/env node
// scripts/generate-secrets.js
const crypto = require('crypto');

console.log('üîê WildGuard API - Secure Environment Variables Generator');
console.log('========================================================\n');

// Generate JWT secrets
const devJwtSecret = crypto.randomBytes(64).toString('hex');
const prodJwtSecret = crypto.randomBytes(64).toString('hex');
const testJwtSecret = crypto.randomBytes(64).toString('hex');

// Generate API keys (example format)
const webhookSecret = crypto.randomBytes(32).toString('hex');
const encryptionKey = crypto.randomBytes(32).toString('hex');

console.log('üìù Copy these secure values to your environment files:\n');

console.log('üöÄ DEVELOPMENT (.env):');
console.log('======================');
console.log(`JWT_SECRET=${devJwtSecret}`);
console.log(`WEBHOOK_SECRET=${webhookSecret}`);
console.log(`ENCRYPTION_KEY=${encryptionKey}\n`);

console.log('üè≠ PRODUCTION (.env.production):');
console.log('=================================');
console.log(`JWT_SECRET=${prodJwtSecret}`);
console.log(`WEBHOOK_SECRET=${crypto.randomBytes(32).toString('hex')}`);
console.log(`ENCRYPTION_KEY=${crypto.randomBytes(32).toString('hex')}\n`);

console.log('üß™ TEST (.env.test):');
console.log('====================');
console.log(`JWT_SECRET=${testJwtSecret}`);
console.log(`WEBHOOK_SECRET=${crypto.randomBytes(32).toString('hex')}`);
console.log(`ENCRYPTION_KEY=${crypto.randomBytes(32).toString('hex')}\n`);

console.log('üîí Security Notes:');
console.log('==================');
console.log('‚úÖ All secrets are cryptographically secure (256+ bits)');
console.log('‚úÖ Each environment has unique secrets');
console.log('‚úÖ JWT secrets are 128 characters (512 bits)');
console.log('‚úÖ Never commit these values to version control');
console.log('‚úÖ Store production secrets in secure environment variables\n');

console.log('üìã Additional Security Recommendations:');
console.log('=======================================');
console.log('‚Ä¢ Use environment variable injection for production deployment');
console.log('‚Ä¢ Rotate secrets regularly (recommended: every 90 days)');
console.log('‚Ä¢ Use different database credentials for each environment');
console.log('‚Ä¢ Enable database SSL/TLS connections in production');
console.log('‚Ä¢ Set up monitoring for failed authentication attempts');
console.log('‚Ä¢ Consider using a secrets management service (AWS Secrets Manager, etc.)');

console.log('\nüéâ Secrets generated successfully!');
console.log('Run this script anytime to generate new secure values.');